<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular + C# DotNetZip 實現下載 Zip 文件</title>
    <url>/20210825/842960.html</url>
    <content><![CDATA[<h4 id="1-先在-Nuget-加入-dotNetZip，加入後即可在專案中使用。"><a href="#1-先在-Nuget-加入-dotNetZip，加入後即可在專案中使用。" class="headerlink" title="1.先在 Nuget 加入 dotNetZip，加入後即可在專案中使用。"></a>1.先在 Nuget 加入 dotNetZip，加入後即可在專案中使用。</h4><img src="https://i.imgur.com/Zu8qPkX.png" width="80%" height="30%" />

<h4 id="2-將文件壓縮"><a href="#2-將文件壓縮" class="headerlink" title="2.將文件壓縮"></a>2.將文件壓縮</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">MemoryStream outputStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> zip = <span class="keyword">new</span> ZipFile())</span><br><span class="line">&#123;</span><br><span class="line">    zip.Password = pwd;</span><br><span class="line">    zip.AddEntry(fileName, content);</span><br><span class="line">    zip.Save(outputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file = Convert.ToBase64String(outputStream.ToArray());</span><br></pre></td></tr></table></figure>

<p>以上程式碼就是壓縮！</p>
<p>zip.Password 為將 zip 加密的密碼，也可以不需要。</p>
<p>zip.AddEntry(fileName, content);<br>fileName為 zip 文件裡的檔案名稱，content 為檔案內容。</p>
<p>zip.Save(outputStream);<br>因為要將 zip 文件轉為 base64，所以這邊直接將 zip 寫入記憶體而不是直接儲存為實體檔。</p>
<p>最後再將剛剛的記憶體轉成 byte 後再轉 base64 即可。</p>
]]></content>
      <categories>
        <category>Angular</category>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>21 天 Bootstrap 5 新手實戰營 - Week 1</title>
    <url>/20210512/058310.html</url>
    <content><![CDATA[<h3 id="Bootstrap-是什麼？"><a href="#Bootstrap-是什麼？" class="headerlink" title="Bootstrap 是什麼？"></a>Bootstrap 是什麼？</h3><p>由 HTML、CSS 和 JavaScript 寫好的前端框架，需要時只要載入已經寫好的程式碼來使用即可。</p>
<h3 id="如何使用-Bootstrap？"><a href="#如何使用-Bootstrap？" class="headerlink" title="如何使用 Bootstrap？"></a>如何使用 Bootstrap？</h3><p>官方提供兩種載入方式：</p>
<ol>
<li>嵌入CDN</li>
</ol>
<blockquote>
<p>利用網路連上與現在位置最近的伺服器。</p>
</blockquote>
<ul>
<li>優：載入速度快、省流量。</li>
<li>缺：人品差的話 CDN 掛掉自己的網站也會跟著掛。</li>
</ul>
<ol start="2">
<li>下載在本地端使用</li>
</ol>
<blockquote>
<p>顧名思義將其他人提供的程式碼下載下來在自己的電腦使用。</p>
</blockquote>
<ul>
<li>優：可修改程式碼做客製化來使用。</li>
<li>缺：如果程式碼很大一包的話載入會載很久。</li>
</ul>
<img src="https://i.imgur.com/uLtNFp1.png" width="50%" height="50%" />

<p>上圖為使用 CDN 方式，<code>chrome</code>可視為自己的伺服器，如果要連上六角學院的官網，需要先輸入網址進入，進入後會把首頁的 html 抓下來在自己的瀏覽器解析才可以看到網頁，如果解析到一半，瀏覽器發現 html 有外部伺服器的網址，便會連到最近的伺服器取得需要的東西。</p>
<img src="https://i.imgur.com/tL6DsFX.png" width="50%" height="50%" />

<p>如果把 bootstrap 下載在本地端使用的話，如上圖，就會變成自己的伺服器來回取得所需的東西，也會造成自己伺服器的流量過大。</p>
<p>所以到底要如何使用 Bootstrap？</p>
<ul>
<li>使用CDN：進入官網的 <a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">Introduction</a></li>
</ul>
<img src="https://i.imgur.com/c9ZrV7d.png" width="80%" height="50%" />
<img src="https://i.imgur.com/a4OFWSi.png" width="80%" height="50%" />

<p>依照內容將<code>CSS</code>貼上至 <code>&lt;head&gt; &lt;/head&gt;</code>間，以及將<code>JS</code>貼在<code>&lt;body&gt;</code>的結尾處。</p>
<ul>
<li>下載在本地端：進入官網的 <a href="https://getbootstrap.com/docs/5.0/getting-started/download/">Download</a></li>
</ul>
<img src="https://i.imgur.com/s82LhrT.png" width="80%" height="50%" />

<p>點選<code>Download</code>即可下載下來。</p>
<img src="https://i.imgur.com/qArLxhp.png" width="40%" height="40%" />

<p>解壓縮後可以看到裡面有 CSS 跟 JS 的檔案夾，從CDN的網址可以看到，我們需要的檔案只有<strong>CSS裡的bootstrap.min.css</strong> 以及 <strong>JS裡的bootstrap.bundle.min.js</strong>，把兩支檔案複製到自己的檔案下，再嵌入即可。</p>
<h3 id="如何確認是否有成功使用-Bootstrap？"><a href="#如何確認是否有成功使用-Bootstrap？" class="headerlink" title="如何確認是否有成功使用 Bootstrap？"></a>如何確認是否有成功使用 Bootstrap？</h3><p>以下以使用CDN為例：</p>
<ol>
<li>打開檢查至 Network 查看是否有<code>bootstrap.min.css</code>及<code>bootstrap.bundle.min.js</code>的檔案。</li>
</ol>
<img src="https://i.imgur.com/zFeevoc.png" width="40%" height="40%" />

<ol start="2">
<li>如果有錯誤的話 e.g.網址打錯，Console 會報錯，顯示找不到此檔案。右上角也會顯示錯誤的程式碼在哪個檔案以及哪一行。</li>
</ol>
<img src="https://i.imgur.com/8etiUoU.png" width="50%" height="50%" />

<h3 id="CSS-重置與-Bootstrap-重置"><a href="#CSS-重置與-Bootstrap-重置" class="headerlink" title="CSS 重置與 Bootstrap 重置"></a>CSS 重置與 Bootstrap 重置</h3><p>Q：為什麼需要 CSS 重置？<br>A：CSS 本身就有預設值，而這些預設值時常在排版的時候帶來很大的不便，尤其各家的瀏覽器又有各自的預設值，使開發者需要花一些時間成本去針對各瀏覽器的 CSS 去做調整。</p>
<p>CSS 重置總共有兩種，分別為：</p>
<ul>
<li><p>CSS Reset：CSS Reset 也有幾套常見的版本，我最常使用的是 <a href="https://meyerweb.com/eric/tools/css/reset/">Eric Meyer 的版本</a>。</p>
</li>
<li><p><a href="https://necolas.github.io/normalize.css/">CSS Normalize</a></p>
</li>
</ul>
<p>兩者的差異是 CSS Normalize 保留原本預設 HTML 標籤的樣式，僅針對不同瀏覽器與各版本間不相容的標籤進行些微調整，而 CSS Reset 則是把所有瀏覽器最不一致的地方強制歸 0，相對比較沒有彈性。</p>
<p>但兩者都有人使用，可以針對需求擇一使用即可。</p>
<p><a href="https://bootstrap5.hexschool.com/docs/5.0/content/reboot/">Bootstrap 重置</a>也是如此，舉例來說 Bootstrap 會把預設的字型替換成自己的字型結構。</p>
<img src="https://i.imgur.com/mEL7jfn.png" width="50%" height="50%" />

<h3 id="CSS-按鈕小技巧"><a href="#CSS-按鈕小技巧" class="headerlink" title="CSS 按鈕小技巧"></a>CSS 按鈕小技巧</h3><p>情境1：老闆今天的需求是一顆黑底 btn，交出去後他又突然要加一顆黃色的，黃色做完又要一顆灰色的，於是我將 CSS 複製貼上改了背景顏色生出了三顆 btn。</p>
<img src="https://i.imgur.com/QGBJrit.png" width="40%" height="40%" />

<p>如果老闆之後又要繼續加不同顏色的 btn，那是不是要繼續複製一堆很籠的程式碼？</p>
<p>這時候就可以使用 <strong>CSS 累加</strong>的方式，寫一行只有背景顏色的程式碼，並加在原本的 CSS 後方。</p>
<img src="https://i.imgur.com/8XhZoj8.png" width="40%" height="40%" />

<p>依照 CSS 權重，雖然兩者權重一樣，但 CSS 樣式後面會覆蓋掉前面的樣式，如下圖，一開始黑色 btn 的背景顏色就會被槓掉，換成第二個 CSS 的黃色，其餘一模一樣。</p>
<img src="https://i.imgur.com/E8sTbJE.png" width="40%" height="40%" />

<h3 id="CSS-權重"><a href="#CSS-權重" class="headerlink" title="CSS 權重"></a>CSS 權重</h3><p>基本的權重為 <code>inline style &gt; ID &gt; Class &gt; Element &gt; *</code></p>
<ul>
<li>*：很常使用的全站預設值，權重為 <code>0-0-0-0</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    padding: <span class="number">0</span></span><br><span class="line">    margin: <span class="number">0</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>element：所有權重皆為 <code>0-0-0-1</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div, p, h1, ul, ol, li, em, header, footer .....</span><br></pre></td></tr></table></figure>

<ul>
<li>class：分成在 CSS 裡的及 html 裡的，但權重皆為 <code>0-0-1-0</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">   color : #000000;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>id：分成在 CSS 裡的及 html 裡的，但權重皆為 <code>0-1-0-0</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">id=<span class="string">&quot;box&quot;</span>;</span><br><span class="line"></span><br><span class="line">#box&#123;</span><br><span class="line">   color : #000000;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>inline style：寫在 html 行內的 style，權重為 <code>1-0-0-0</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;color:#000000&quot;</span>&gt;</span><br><span class="line">    CSS </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>但還有一個老大叫做 <strong>!important</strong>，!important 的權重非常高，可以蓋過所有的權重。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   color : #000000; !important</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>舉個例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** html */</span></span><br><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title1 title2&quot;</span>&gt;標題&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** CSS */</span></span><br><span class="line">.title1&#123;</span><br><span class="line"> color: red;</span><br><span class="line">&#125;</span><br><span class="line">.title2&#123;</span><br><span class="line"> color: black;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line"> color: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顏色為黑色，因為 h1 權重為 1，class 權重為 10，而 title2 把 title1 覆蓋了。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** html */</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title1 title2&quot;</span>&gt;標題&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** CSS */</span></span><br><span class="line">.title1&#123;</span><br><span class="line"> color: red;</span><br><span class="line">&#125;</span><br><span class="line">.title2&#123;</span><br><span class="line"> color: black;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line"> color: pink;</span><br><span class="line">&#125;</span><br><span class="line">.container h1&#123;</span><br><span class="line"> color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顏色為黃色，因為class 權重為 10，而 container + h1 為 11。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** html */</span></span><br><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title2 title1&quot;</span>&gt;標題&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** CSS */</span></span><br><span class="line">.title1&#123;</span><br><span class="line"> color: red;</span><br><span class="line">&#125;</span><br><span class="line">.title2&#123;</span><br><span class="line"> color: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顏色為黑色，兩者都是 class，只會看 CSS 的順序，不會看 html 的前後。</span></span><br></pre></td></tr></table></figure>

<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><em><a href="https://getbootstrap.com/docs/4.6/getting-started/introduction/">Bootstrap 5 官方文件</a></em><br><em><a href="https://blog.yyisyou.tw/58be4690/">Reset CSS與Normalize CSS介紹</a></em></p>
]]></content>
      <categories>
        <category>Bootstrap 5</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Bootstrap 5</tag>
        <tag>HexSchool</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 「傳值」或「傳址」</title>
    <url>/20210420/490932.html</url>
    <content><![CDATA[<h2 id="基本型別"><a href="#基本型別" class="headerlink" title="基本型別"></a>基本型別</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( a === b );      <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在基本型別時，會認為兩個變數的「值」是相等的，因為兩個變數的「值」都是 <code>10</code> ，同樣的在字串的情況下也是相同的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;yswu&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;yswu&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( a === c );      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log( a === b );      <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>因此在<strong>基本型別</strong>（如<code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>），判斷兩個變數是否相等，看的是裡面的內容，也就是裡面的「值」。</p>
<p>繼續來看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = a;</span><br><span class="line">c++</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( a );   <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log( c );   <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<p>當 <code>c</code> 指定 <code>a</code> 時，由於 <code>a</code> 是<strong>基本型別</strong>，所以 <code>c</code> 得到的是 <code>a</code> 的值而不是 <code>a</code> 的記憶體位置，所以儘管 <code>c</code> 改變了 <code>a</code> 也不會受到引響，兩者是獨立的。</p>
<p>當指定（賦值）一個<strong>基本型別</strong>給變數，就稱作「傳值」(pass by value)。</p>
<h2 id="物件型別"><a href="#物件型別" class="headerlink" title="物件型別"></a>物件型別</h2><p>在物件的情況下，先分別宣告兩個物件，兩個物件都有個 <code>value</code> 的屬性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">value</span> : <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">value</span> : <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj1 === obj2 );      <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>可以觀察到，<code>obj1</code> 和 <code>obj2</code> 的屬性和值都相同，得到的卻是false。</p>
<p>這是因為在JavaScript物件，可以把object當作是獨立存在的實體，兩者的記憶體位置並不相同，在比較<strong>物件型別</strong>時，比較的是記憶體位置，而非值。</p>
<p>繼續來看：將 <code>obj2</code> 利用 <code>obj2 = obj1</code> 的方式來賦值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">value</span> : <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line"><span class="built_in">console</span>.log( obj1 === obj2 );      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj1.value = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj2.value );      <span class="comment">//1 </span></span><br><span class="line"></span><br><span class="line">obj1.flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log ( obj2.flag );      <span class="comment">//true </span></span><br></pre></td></tr></table></figure>

<p>在這邊可以看到，因為 <code>obj1</code> 與 <code>obj2</code> 兩者變數指向相同的記憶體位置，所以 <code>obj1</code> 做修改或新增， <code>obj2</code> 也會跟著改變。</p>
<p>但將 <code>obj1</code> 賦值新的物件時：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj1 === obj2 );  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>此時因為 <code>obj1</code>指向新的記憶體位置，而 <code>obj2</code> 還在原來的記憶體位置，因此 <code>obj1</code> 和 <code>obj2</code> 就沒有關係了。</p>
<p>當指定（賦值）一個<strong>物件型別</strong>給變數，就稱作「傳址」(pass by reference)。</p>
<h2 id="JavaScript-是「傳值」或「傳址」"><a href="#JavaScript-是「傳值」或「傳址」" class="headerlink" title="JavaScript 是「傳值」或「傳址」?"></a>JavaScript 是「傳值」或「傳址」?</h2><p>在大多數的情況下，基本型別是「傳值」，而物件型別會是「傳址」的方式，但<strong>凡事都有例外</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj = &#123; <span class="attr">value</span>: <span class="number">999</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeValue(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);  <span class="comment">// &#123; value: 10 &#125;</span></span><br></pre></td></tr></table></figure>

<p>前面說過物件是利用「傳址」的方式來更新資料，那應該會變成 <code>&#123; value: 999 &#125;</code> 怎麼還是一樣的呢？</p>
<p>事實上，JavaScript 不屬於單純的「pass by value」或「pass by reference」。 更準確一點來說，JavaScript 應該屬於透過 <code>pass by sharing</code> 來傳遞資料。</p>
<h2 id="Pass-by-sharing"><a href="#Pass-by-sharing" class="headerlink" title="Pass by sharing"></a>Pass by sharing</h2><p>「Pass by sharing」的特點在於，當 <code>function</code> 的參數，如 <code>function changeValue(obj)&#123; ... &#125;</code> 中的 <code>obj</code> 被重新賦值的時候，外部變數的內容是不會被影響的。</p>
<p>如果不是重新賦值的情況，則又會回到大家所熟悉的狀況：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.value = <span class="number">999</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeValue(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);  <span class="comment">// &#123; value: 999 &#125;</span></span><br></pre></td></tr></table></figure>

<p>不少人將 JavaScript 的變數內容傳遞方式，稱為 Pass by sharing：</p>
<ul>
<li>碰到<strong>基本型別</strong>，表現行為是 Pass by value。</li>
<li>碰到<strong>物件型別</strong>，如果只是對物件內容作操作(例如陣列元素或物件屬性)，表現行為是 Pass by reference。</li>
<li>碰到<strong>物件型別</strong>，如果對物件作重新賦值，表現行為是 Pass by value。</li>
</ul>
<p>或者也有人視為：JavaScript 的<strong>基本型別</strong>是 Pass by Value，<strong>物件型別</strong>是 Pass by sharing。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 「同步」與「非同步」</title>
    <url>/20210511/910458.html</url>
    <content><![CDATA[<h3 id="「單執行緒」與「多執行緒」"><a href="#「單執行緒」與「多執行緒」" class="headerlink" title="「單執行緒」與「多執行緒」"></a>「單執行緒」與「多執行緒」</h3><p>單執行緒指的是一次執行一個指令，不能同時執行多個指令。<br>反之多執行緒指的便是一次能夠執行多個指令。而 JavaScript 則是屬於一種單執行緒的程式語言。</p>
<h3 id="同步-Synchrnous"><a href="#同步-Synchrnous" class="headerlink" title="同步 (Synchrnous)"></a>同步 (Synchrnous)</h3><blockquote>
<p>一次做一件事，依序執行。</p>
</blockquote>
<h3 id="非同步-Asynchrnous"><a href="#非同步-Asynchrnous" class="headerlink" title="非同步 (Asynchrnous)"></a>非同步 (Asynchrnous)</h3><blockquote>
<p>同時可以做很多事，不需等到上一個事件完成再做下一件。</p>
</blockquote>
<img src="https://i.imgur.com/cO5NGxc.png" width="50%" height="50%" />

<p>摁？不是說 JavaScript 是單執行緒，為什麼會有非同步的存在？<br>事情是這樣的，因為 JavaScript 是透過 <code>瀏覽器</code> 在執行的，如果瀏覽器使用同步執行的話，網頁便會塞車，稱為阻塞 (Blocking)。</p>
<h3 id="瀏覽器何時會使用非同步？"><a href="#瀏覽器何時會使用非同步？" class="headerlink" title="瀏覽器何時會使用非同步？"></a>瀏覽器何時會使用非同步？</h3><ul>
<li>setTimeout()：setTimeout 是指過了一段時間再處理要發生的事。等時間到了後，再把事件丟回 JavaScript，告訴它我要執行了。</li>
<li>Ajax：Ajax 是向服務器發送請求，試想一下，如果回傳過程很久，網頁什麼事都不能做，那使用者也只能在螢幕前尷尬了。</li>
</ul>
<h3 id="瀏覽器如何管理同步與非同步？"><a href="#瀏覽器如何管理同步與非同步？" class="headerlink" title="瀏覽器如何管理同步與非同步？"></a>瀏覽器如何管理同步與非同步？</h3><p>在 JavaScript 引擎裡可以分為 <strong>執行環境 (Execution Context)</strong> 和 **事件佇列 (Event Queue)**。<br>Execution Context 主要負責處理同步事件，Event Queue則是處理非同步事件，在處理事件的優先順序為 Execution Context =&gt; Event Queue，而兩者在事件處理完畢後也會跟著離開該環境，瀏覽器便能判斷事件是否結束。</p>
<p>以下範例，模擬出像是非同步的行為：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;222222&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;333333&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>結果如下：<br><img src="https://i.imgur.com/uqAVq1S.gif" width="20%" height="10%" /></p>
<p>可以瞭解瀏覽器的執行程序為：</p>
<ol>
<li>印出 111111</li>
<li>等 setTimeout 設定的五秒</li>
<li>印出 333333</li>
<li>五秒到了，印出 222222</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - 更改 Title 及 Icon</title>
    <url>/20210505/013829.html</url>
    <content><![CDATA[<p>1.更改 Title</p>
<h4 id="第一步：在-app-module-ts-注入-title-服務"><a href="#第一步：在-app-module-ts-注入-title-服務" class="headerlink" title="第一步：在 app.module.ts 注入 title 服務"></a>第一步：在 app.module.ts 注入 title 服務</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule, Title &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./home/home.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    HomeModule,</span><br><span class="line">  ],</span><br><span class="line">  providers: [Title],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：在要更改的-Component-中的-constructor-注入與寫上功能"><a href="#第二步：在要更改的-Component-中的-constructor-注入與寫上功能" class="headerlink" title="第二步：在要更改的 Component 中的 constructor 注入與寫上功能"></a>第二步：在要更改的 Component 中的 constructor 注入與寫上功能</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Title &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-home&#x27;</span>,</span><br><span class="line">  templateUrl: <span class="string">&#x27;./home.component.html&#x27;</span>,</span><br><span class="line">  styleUrls: [<span class="string">&#x27;./home.component.sass&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    private titleService: Title</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.titleService.setTitle(<span class="string">&#x27;This is my title&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更改 Title 完成。</p>
<p>2.更改網頁 Icon</p>
<h4 id="第一步：將欲使用的-ico-檔放置於-assets-資料夾"><a href="#第一步：將欲使用的-ico-檔放置於-assets-資料夾" class="headerlink" title="第一步：將欲使用的 ico 檔放置於 assets 資料夾"></a>第一步：將欲使用的 ico 檔放置於 assets 資料夾</h4><p>ng serve 啟動後，輸入 <code>http://localhost:4200/assets/xxxx.ico</code> 可確認圖片是否顯示。<br>※Angular預設 port 是4200，網址會依您服務設定的 port 而有所不同。</p>
<h4 id="第二步：將-icon-的連結改為-“assets-xxxx-ico”"><a href="#第二步：將-icon-的連結改為-“assets-xxxx-ico”" class="headerlink" title="第二步：將 icon 的連結改為 “assets/xxxx.ico”"></a>第二步：將 icon 的連結改為 “assets/xxxx.ico”</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Portfolio&lt;/title&gt;</span><br><span class="line">  &lt;base href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;icon&quot;</span> type=<span class="string">&quot;image/x-icon&quot;</span> href=<span class="string">&quot;assets/sshaannnn.ico&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>更改網頁 Icon 完成。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><em><a href="https://angular.io/guide/set-document-title">Angular官方文件/動態調整Title</a></em></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js - 使用 Node.js 爬 Ptt Marvel 板</title>
    <url>/20211018/749274.html</url>
    <content><![CDATA[<h4 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h4><p>node.js 爬蟲需要用到兩個 Library</p>
<ul>
<li>request：主要是用來模擬 HTTP 的動作，可以用來取得整個頁面的 HTML。</li>
<li>cheerio：從 HTML 中擷取需要的資料。</li>
</ul>
<h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ npm i request -s</span><br><span class="line">$ npm i cheerio -s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="載入"><a href="#載入" class="headerlink" title="載入"></a>載入</h4><p>安裝好後就可以看到專案的 package.json 已經出現，這時候就可以引入程式中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="觀察"><a href="#觀察" class="headerlink" title="觀察"></a>觀察</h4><p>這邊使用 Ptt Marvel 板檔做範例，會用到 Chrome Dev Tool 來分析網頁的 html。<br>1.先取得需要的區塊<br><img src="https://i.imgur.com/xRdpoCc.png" width="80%" height="30%" /></p>
<p>2.接著可以看到一個 <code>&lt;div class=&quot;r-ent&quot;&gt;&lt;/div&gt;</code> 就是一個小區塊</p>
<img src="https://i.imgur.com/hhSCuvw.png" width="80%" height="30%" />

<h4 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h4><p>找到需要的畫面後，就需要用 <strong>request</strong> 抓取頁面 html，而這裡的 body 是一整網頁裡 body 的內容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getMarvelTitle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  request(&#123;</span><br><span class="line">    url: <span class="string">&quot;https://www.ptt.cc/bbs/Marvel/index.html&quot;</span>,</span><br><span class="line">    method: <span class="string">&quot;GET&quot;</span></span><br><span class="line">  &#125;, <span class="function">(<span class="params">error, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果有錯誤訊息，或沒有 body(內容)，就 return</span></span><br><span class="line">     <span class="keyword">if</span> (error || !body) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<p>接著使用 <strong>cheerio</strong> 擷取 body 裡需要的部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line">   <span class="keyword">const</span> $ = cheerio.load(body); <span class="comment">// 載入 body</span></span><br><span class="line">   <span class="keyword">const</span> list = $(<span class="string">&quot;.r-list-container .r-ent&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">     <span class="keyword">const</span> title = list.eq(i).find(<span class="string">&#x27;.title a&#x27;</span>).text();</span><br><span class="line">     <span class="keyword">const</span> author = list.eq(i).find(<span class="string">&#x27;.meta .author&#x27;</span>).text();</span><br><span class="line">     <span class="keyword">const</span> date = list.eq(i).find(<span class="string">&#x27;.meta .date&#x27;</span>).text();</span><br><span class="line">     <span class="keyword">const</span> link = list.eq(i).find(<span class="string">&#x27;.title a&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (title.indexOf(<span class="string">&#x27;經驗&#x27;</span>) === <span class="number">1</span>) data.push(&#123; title, author, date, link &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>因為我只想看經驗文所以只撈經驗文出來，撈出來的畫面如下。<br>這邊使用 for 迴圈是因為父元素 (.r-list-container) 裡包著許多子元素 (.r-ent) 的結構。</p>
<img src="https://i.imgur.com/Pt79WKU.png" width="80%" height="30%" />

<p>除了爬標題外，也可以順便爬文章內容，一樣會使用到 request、cheerio。<br>不同的是 <strong>request 的網址</strong> 及 <strong>載入 body 後的程式碼</strong>。</p>
<p>首先一樣先分析網頁，可以看到文章內容是在 <code>&lt;div id=&quot;main-content&quot; class=&quot;bbs-screen bbs-content&quot;&gt;&lt;/div&gt;</code> 裡，所以就直接選擇 <code>css=&quot;bbs-content&quot;</code> 的元素即可。</p>
<img src="https://i.imgur.com/o49GASx.png" width="80%" height="30%" />

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = cheerio.load(body); </span><br><span class="line">    <span class="keyword">const</span> list = $(<span class="string">&quot;.bbs-content&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> word;</span><br><span class="line">    list.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      word = $(<span class="built_in">this</span>).text()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    word = word.slice(<span class="number">0</span>, word.indexOf(<span class="string">&#x27;-----&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>最後爬到的內容會包含下面的留言區塊，直接使用 <strong>slice</strong> 把 <code>-----</code> 後面的都砍掉，就會單獨顯示文章內容了～</p>
<img src="https://i.imgur.com/rXmP7UO.png" width="80%" height="30%" />]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Backend</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - 組件傳值</title>
    <url>/20210429/917901.html</url>
    <content><![CDATA[<h2 id="父傳子"><a href="#父傳子" class="headerlink" title="父傳子"></a>父傳子</h2><ul>
<li>傳資料</li>
</ul>
<p>父元件需要先宣告要傳到子元件的變數，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title = <span class="string">&quot;父元件來的&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>接著透過html來傳送給子元件，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;app-child [data]=<span class="string">&quot;title&quot;</span>&gt;&lt;/app-child&gt;</span><br></pre></td></tr></table></figure>

<p>使用 <code>Input</code> 宣告要接收父元件的變數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Input() data: string;</span><br></pre></td></tr></table></figure>

<p>最後在子元件中使用 <code>data</code> 即可。</p>
<ul>
<li>傳事件</li>
</ul>
<p>父元件需要先宣告要傳到子元件的事件，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sendFromDad(): <span class="keyword">void</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;這是父元件來的方法&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著透過html來傳送給子元件，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;app-child [functionn]=<span class="string">&quot;sendFromDad()&quot;</span>&gt;&lt;/app-child&gt;</span><br></pre></td></tr></table></figure>

<p>使用 <code>Input</code> 宣告要接收父元件的變數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Input() functionn: any;</span><br></pre></td></tr></table></figure>

<p>最後在子元件中使用 <code>this.functionn()</code> 即可。</p>
<h2 id="子傳父"><a href="#子傳父" class="headerlink" title="子傳父"></a>子傳父</h2><p>需要先在子元件使用 <code>Output</code> 宣告要傳送到父元件的變數，及利用 <code>EventEmitter</code> 輸出屬性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Output() childToDad: EventEmitter&lt;any&gt; = <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure>

<p>觸發事件後，會將事件內容傳送出去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">send($event): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.childToDad.emit(<span class="string">&quot;從子元件來的&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著透過html來傳送給子元件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;app-child (childToDad)=<span class="string">&quot;dadGet($event)&quot;</span>&gt;&lt;/app-child&gt;</span><br></pre></td></tr></table></figure>

<p>父元件接到後即可執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dadGet(msg: string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Git commit 規範</title>
    <url>/20210422/297699.html</url>
    <content><![CDATA[<blockquote>
<p>Commit Message 最好兼俱 Why 及 What，讓日後進行維護人員更快進入狀況。</p>
</blockquote>
<h3 id="Commit-Message-規範組成"><a href="#Commit-Message-規範組成" class="headerlink" title="Commit Message 規範組成"></a>Commit Message 規範組成</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">header:<span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>type：代表 commit 的類別：feat、fix、docs、style,、refactor、test、chore，<strong>必要</strong></font>欄位。</li>
<li>scope：代表 commit 影響的範圍，例如資料庫、控制層、模板層等等，視專案不同而不同，為<strong>可選</strong></font>欄位。</li>
<li>subject：代表此 commit 的簡短描述，不要超過 50 個字元，結尾不要加句號，為<strong>必要</strong></font>欄位。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body: 對本次 Commit 的詳細描述，說明程式碼變動的項目與原因，還有與先前行為的對比，可分成多行，每一行不要超過 72 個字元。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">footer:填寫任務編號(如果有的話) / BREAKING CHANGE (中斷性變更)(可忽略)。</span><br></pre></td></tr></table></figure>

<h3 id="type-只允許使用以下類別"><a href="#type-只允許使用以下類別" class="headerlink" title="type 只允許使用以下類別"></a>type 只允許使用以下類別</h3><ul>
<li>feat: 新增/修改功能 (feature)。</li>
<li>fix: 修補 bug (bug fix)。</li>
<li>docs: 文件 (documentation)。</li>
<li>style: 格式 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, etc)。</li>
<li>refactor: 重構 (既不是新增功能，也不是修補 bug 的程式碼變動)。</li>
<li>perf: 改善效能 (A code change that improves performance)。</li>
<li>test: 增加測試 (when adding missing tests)。</li>
<li>chore: 建構程序或輔助工具的變動 (maintain)。</li>
<li>revert: 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。</li>
</ul>
<blockquote>
<p>Type 是用來告訴進行 Code Review 的人應該以什麼態度來檢視 Commit 內容。</p>
</blockquote>
<h3 id="Commit-訊息範例"><a href="#Commit-訊息範例" class="headerlink" title="Commit 訊息範例"></a>Commit 訊息範例</h3><ul>
<li><p>only header</p>
<p><code>1. fix: 自訂表單新增/編輯頁面，修正離開頁面提醒邏輯</code><br><code>2. feat: message 信件通知功能</code><br><code>3. chore: 更新 testing 環境</code><br><code>4. feat: message 信件通知功能</code></p>
</li>
<li><p>header+body+footer</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">feat: message 信件通知功能</span><br><span class="line"></span><br><span class="line">因應新需求做調整：</span><br><span class="line">通知和 message 都要寄發每日信件，</span><br><span class="line">通知和 message 都用放在同一封信裡面就好，</span><br><span class="line">不然信件太多可能也不會有人想去看。</span><br><span class="line"></span><br><span class="line">調整項目：</span><br><span class="line">1. mail_template.php，新增 message 區塊。</span><br><span class="line">2. Send_today_notify_mail.php，新增 取得每日 Message 邏輯。</span><br><span class="line">3. Message_model_api.php，新增 $where 參數，以便取得每日訊息。</span><br><span class="line">4. Message_api.php、Message_group_user_model_api.php，新增 取得訊息使用者邏輯，以便撈取每日訊息。</span><br><span class="line"></span><br><span class="line">issue #863</span><br></pre></td></tr></table></figure>

<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><em><a href="https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html">Git Commit Message 這樣寫會更好，替專案引入規範與範例</a></em></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
